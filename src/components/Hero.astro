<section class="relative min-h-[250vh] md:min-h-[150vh] px-4 flex flex-col items-center justify-center" id="hero-section">
  <div class="absolute inset-0 bg-black"></div>
  <div class="gradient-bg absolute inset-0 opacity-70 pointer-events-none"></div>
  <div class="particles-container absolute inset-0 pointer-events-none"></div>
  <div class="absolute inset-0 bg-[url('/noise.svg')] opacity-10"></div>
  
  <!-- Hero Content - Centrado verticalmente en la pantalla -->
  <div class="w-full flex flex-col items-center justify-center text-center mb-64 md:mb-80 relative z-10">
    <h1 class="text-3xl sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl font-bold tracking-tight mb-2 md:mb-3">
      Gestión <span class="text-yang">Administrativa Académica</span>
    </h1>
    <p class="text-balance text-sm sm:text-base md:text-lg mb-3 md:mb-4 max-w-lg mx-auto">
      Optimiza las tareas administrativas en tu entorno académico con una interfaz intuitiva que facilita la planificación y gestión de recursos.
    </p>
    <div class="flex flex-col sm:flex-row flex-wrap gap-3 justify-center w-full max-w-xs sm:max-w-none">
      <a 
        href="/Gestion.apk" 
        download
        class="bg-yang text-yin hover-yang font-medium py-2 md:py-3 px-6 md:px-8 rounded-md text-sm w-full sm:w-auto text-center inline-flex items-center justify-center"
        aria-label="Descargar la aplicación"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
        </svg>
        Descargar
      </a>
      <a 
        href="/manual" 
        class="bg-transparent hover:bg-gray-800 transition-colors text-yang border border-yang font-medium py-2 md:py-3 px-6 md:px-8 rounded-md text-sm w-full sm:w-auto text-center inline-flex items-center justify-center"
        aria-label="Ver manual de usuario"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
        </svg>
        Manual de usuario
      </a>
    </div>
  </div>
  
  <!-- Single Mockup Container - positioned lower in the viewport -->
  <div class="fixed-bottom-container">
    <div class="mockup-container" data-scroll="central">
      <img 
        src="/Mockup1.webp" 
        alt="Vista de la aplicación - Panel de Actividades" 
        class="block w-auto mockup-image"
        width="300" 
        height="600"
        fetchpriority="high"
      />
    </div>
  </div>
  <div id="mockup-trigger" class="h-[50px] w-full"></div>

</section>

<style>
  /* Base styles */
  .gradient-bg {
    background: radial-gradient(circle at 50% 50%, rgba(25, 25, 112, 0.3) 0%, rgba(0, 0, 128, 0.2) 40%, rgba(0, 0, 139, 0.05) 80%, rgba(0, 0, 0, 0) 100%);
    filter: blur(50px);
    transition: background 0.8s ease-out;
  }
  
  .particles-container {
    overflow: hidden;
  }
  
  /* Desktop styles (default) */
  .fixed-bottom-container {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    display: flex;
    justify-content: center;
    height: 70vh;
    align-items: flex-end;
    z-index: 20;
  }
  
  .mockup-container {
  position: relative;
  transform: translateY(40px); /* Pequeño desplazamiento hacia abajo inicial */
  opacity: 0;
  transition: transform 0.8s ease-out, opacity 0.8s ease-out;
}

.mockup-container.visible {
  transform: translateY(0); /* Aparece en su lugar */
  opacity: 1;
}


  
  .mockup-image {
    display: block;
    max-height: 70vh;
    object-fit: contain;
    object-position: bottom;
    border-radius: 24px 24px 0 0;
  }
  
  .particle {
    position: absolute;
    background: radial-gradient(circle at center, rgba(65, 105, 225, 0.9) 0%, rgba(0, 0, 139, 0.6) 30%, rgba(25, 25, 112, 0.2) 70%, transparent 100%);
    border-radius: 50%;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.8s ease-out;
  }
  
  @media (max-width: 640px) {
  /* Reduced mobile screen height */
  #hero-section {
    min-height: 90vh; /* Reducido de 100vh */
    height: 80vh; /* Reducido de 100vh */
    /* ... */
  }
  
  /* Ajustar también la proporción del mockup */
  .fixed-bottom-container {
    height: 40vh; /* Reducido de 50vh */
  }
  
  .mockup-image {
    max-height: 40vh; /* Reducido de 50vh */
  }
}
  
  /* Fix for iOS safari bottom bar */
  @supports (-webkit-touch-callout: none) {
    .fixed-bottom-container {
      bottom: env(safe-area-inset-bottom, 0);
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const heroSection = document.getElementById('hero-section');
    const gradientBg = heroSection.querySelector('.gradient-bg');
    const particlesContainer = heroSection.querySelector('.particles-container');
    const mockupContainer = document.querySelector('.mockup-container');
    
    // Gradient animation variables
    let mouseX = 50;
    let mouseY = 50;
    let targetX = 50;
    let targetY = 50;
    let time = 0;
    
    // Partículas variables
    const particles = [];
    const maxParticles = isMobile() ? 15 : 30; // Reducir partículas en móvil
    let lastParticleTime = 0;
    
    // Detectar si es dispositivo móvil
    function isMobile() {
      return window.innerWidth <= 640 || ('ontouchstart' in window);
    }
    
    // Función para crear una partícula
    function createParticle(x, y) {
      const particle = document.createElement('div');
      particle.classList.add('particle');
      
      // Tamaño aleatorio entre 5px y 15px (más pequeño en móvil)
      const sizeFactor = isMobile() ? 0.7 : 1;
      const size = Math.random() * 10 * sizeFactor + 5;
      particle.style.width = `${size}px`;
      particle.style.height = `${size}px`;
      
      // Posición inicial
      const posX = x - size / 2;
      const posY = y - size / 2;
      particle.style.left = `${posX}px`;
      particle.style.top = `${posY}px`;
      
      // Velocidad y dirección aleatoria
      const speedFactor = isMobile() ? 0.8 : 1; // Reducir velocidad en móvil
      const speed = {
        x: (Math.random() - 0.5) * 1.5 * speedFactor,
        y: (Math.random() - 0.5) * 1.5 * speedFactor - 1 // Tendencia hacia arriba
      };
      
      // Duración de vida
      const lifespan = (2000 + Math.random() * 3000) * (isMobile() ? 0.8 : 1); // 2-5 segundos (menos en móvil)
      const creationTime = Date.now();
      
      // Agregar al DOM
      particlesContainer.appendChild(particle);
      
      // Mostrar partícula con un pequeño retraso
      setTimeout(() => {
        particle.style.opacity = (Math.random() * 0.5 + 0.2).toString(); // Opacidad entre 0.2 y 0.7
      }, 10);
      
      // Agregar a la matriz de partículas
      particles.push({
        element: particle,
        speed,
        creationTime,
        lifespan,
        posX,
        posY
      });
      
      // Limitar el número de partículas
      if (particles.length > maxParticles) {
        const oldestParticle = particles.shift();
        oldestParticle.element.remove();
      }
    }
    
    // Función para actualizar partículas
    function updateParticles() {
      const currentTime = Date.now();
      
      particles.forEach((particle, index) => {
        // Calcular tiempo de vida
        const age = currentTime - particle.creationTime;
        
        if (age > particle.lifespan) {
          // Eliminar partícula si ha superado su tiempo de vida
          particle.element.remove();
          particles.splice(index, 1);
        } else {
          // Mover partícula
          particle.posX += particle.speed.x;
          particle.posY += particle.speed.y;
          
          // Aplicar efecto de humo (ralentizar y difuminar con el tiempo)
          particle.speed.x *= 0.99;
          particle.speed.y *= 0.99;
          
          // Aplicar algo de turbulencia suave
          particle.speed.x += (Math.random() - 0.5) * 0.1;
          particle.speed.y += (Math.random() - 0.5) * 0.1;
          
          // Actualizar posición en el DOM
          particle.element.style.left = `${particle.posX}px`;
          particle.element.style.top = `${particle.posY}px`;
          
          // Desvanecimiento gradual
          const lifePercent = age / particle.lifespan;
          particle.element.style.opacity = (0.7 - lifePercent * 0.7).toString();
        }
      });
      
      requestAnimationFrame(updateParticles);
    }
    
    // Función para capturar la posición del mouse
    function trackMouse(e) {
      const heroRect = heroSection.getBoundingClientRect();
      
      if (e.clientY <= heroRect.bottom) {
        targetX = ((e.clientX - heroRect.left) / heroRect.width) * 100;
        targetY = ((e.clientY - heroRect.top) / heroRect.height) * 100;
        
        // Crear partículas ocasionalmente mientras el mouse se mueve
        const currentTime = Date.now();
        if (currentTime - lastParticleTime > 50) { // Limitar a 20 partículas por segundo
          createParticle(e.clientX, e.clientY);
          lastParticleTime = currentTime;
        }
      }
    }
    
    // Función para manejar eventos touch
    function handleTouch(e) {
      if (e.touches && e.touches[0]) {
        trackMouse(e.touches[0]);
      }
    }
    
    // Simular partículas automáticas para dispositivos móviles
    function createRandomParticles() {
      if (isMobile()) {
        const heroRect = heroSection.getBoundingClientRect();
        const randomX = Math.random() * heroRect.width;
        const randomY = Math.random() * (heroRect.height * 0.6); // Solo en la parte superior
        
        const currentTime = Date.now();
        if (currentTime - lastParticleTime > 500) { // Cada 500ms
          createParticle(randomX + heroRect.left, randomY + heroRect.top);
          lastParticleTime = currentTime;
        }
      }
    }
    
    // Función para animar el degradado de humo azul rey
    function animateRoyalBlueSmoke() {
      time += 0.01;
      
      // Movimiento más suave para simular humo
      mouseX += (targetX - mouseX) * 0.05;
      mouseY += (targetY - mouseY) * 0.05;
      
      // Movimientos orgánicos adicionales
      const sineWave1 = Math.sin(time * 0.5) * 5;
      const sineWave2 = Math.cos(time * 0.3) * 3;
      
      const finalX = mouseX + sineWave1;
      const finalY = mouseY + sineWave2;
      
      // Colores azul rey con variaciones sutiles
      const hue = 225 + Math.sin(time) * 5; // Varía entre 220-230 (tonos azul rey)
      const satLight = 60 + Math.sin(time * 1.5) * 10; // Varía entre 50-70%
      
      gradientBg.style.background = `
        radial-gradient(
          circle at ${finalX}% ${finalY}%, 
          hsla(${hue}, 80%, ${satLight}%, 0.4) 0%, 
          hsla(${hue - 5}, 85%, ${satLight - 10}%, 0.25) 30%, 
          hsla(${hue - 10}, 90%, ${satLight - 20}%, 0.15) 60%,
          rgba(0, 0, 0, 0) 100%
        )
      `;
      
      // Crear partículas aleatorias para móviles
      createRandomParticles();
      
      requestAnimationFrame(animateRoyalBlueSmoke);
    }
    
    // Simple scroll animation for mockup - solo en escritorio
    function checkScrollPosition() {
      // Solo aplicar animación si NO es dispositivo móvil
      if (!isMobile()) {
        const scrollPosition = window.scrollY;
        const triggerPosition = window.innerHeight * 0.1;
        
        if (scrollPosition > triggerPosition) {
          mockupContainer.classList.add('visible');
        } else {
          mockupContainer.classList.remove('visible');
        }
      } else {
        // En móvil, siempre mostrar sin animación
        mockupContainer.classList.add('visible');
      }
    }
    
    // Initialize animations
    document.addEventListener('mousemove', trackMouse);
    document.addEventListener('touchmove', handleTouch);
    document.addEventListener('touchstart', handleTouch);
    
    // Solo agregar listener de scroll para desktop
    if (!isMobile()) {
      window.addEventListener('scroll', checkScrollPosition);
    }
    
    window.addEventListener('resize', () => {
      // En cambio de tamaño, verificar si sigue siendo móvil o no
      if (isMobile()) {
        // Para móvil siempre mostrar sin animación
        mockupContainer.classList.add('visible');
      } else {
        // En desktop, volver a verificar posición
        checkScrollPosition();
      }
    });
    
    // Check initial settings
    if (isMobile()) {
      // En móvil, siempre mostrar el mockup sin animar
      mockupContainer.classList.add('visible');
    } else {
      // En desktop, verificar posición de scroll
      checkScrollPosition();
    }
    
    animateRoyalBlueSmoke();
    updateParticles();
    
    // IntersectionObserver solo para desktop
    // Reemplaza el scroll listener y el resize con solo IntersectionObserver
// IntersectionObserver solo para desktop
if ('IntersectionObserver' in window && !isMobile()) {
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        mockupContainer.classList.add('visible');
      } else {
        mockupContainer.classList.remove('visible');
      }
    });
  }, {
    root: null,
    threshold: 0.1
  });

  const triggerElement = document.getElementById('mockup-trigger');
  if (triggerElement) observer.observe(triggerElement);
}


  });
</script> 